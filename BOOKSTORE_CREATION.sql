CREATE SCHEMA BOOK_STORE;
USE BOOK_STORE;

CREATE TABLE AUTHOR (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE PUBLISHER  (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(50) UNIQUE NOT NULL,
    ADDRESS VARCHAR(100) NOT NULL,
    PHONE VARCHAR(11)
);

CREATE TABLE BOOK (
	ISBN VARCHAR(10) PRIMARY KEY NOT NULL,
    TITLE VARCHAR(50) UNIQUE NOT NULL,
    PUBLISHER_ID INT NOT NULL,
    PUBLICATION_YEAR INT NOT NULL,
    PRICE DECIMAL(13, 2) UNSIGNED NOT NULL,
    THRESHOLD INT UNSIGNED NOT NULL,
    AVAILABLE_QUANTITY INT DEFAULT 0,
    CATEGORY ENUM('Science', 'Art', 'Religion', 'History', 'Geography') NOT NULL,
    STOCK_ORDER_QUANTITY INT UNSIGNED NOT NULL DEFAULT 10,
		CREATION_DATE TIMESTAMP DEFAULT NOW(),
    CONSTRAINT BOOK_PUBLISHER FOREIGN KEY (PUBLISHER_ID) REFERENCES PUBLISHER(ID)
);

ALTER TABLE `BOOK_STORE`.`BOOK`
	ADD INDEX `CATEGORY` (`CATEGORY` ASC);

CREATE TABLE BOOK_AUTHOR (
	BOOK_ISBN VARCHAR(10) NOT NULL,
    AUTHOR_ID INT NOT NULL,
    CONSTRAINT BOOK_AUTHOR PRIMARY KEY (BOOK_ISBN, AUTHOR_ID),
    CONSTRAINT BOOK_AUTHOR_BOOK FOREIGN KEY (BOOK_ISBN) REFERENCES BOOK(ISBN) ON UPDATE CASCADE,
	CONSTRAINT BOOK_AUTHOR_AUTHOR FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(ID)
);

CREATE TABLE STOCK_ORDER (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	BOOK_ISBN VARCHAR(10) NOT NULL,
    QUANTITY INT DEFAULT 1,
    IS_RECEIVED BOOLEAN DEFAULT FALSE,
	CONSTRAINT STOCK_ORDER_BOOK FOREIGN KEY (BOOK_ISBN) REFERENCES BOOK(ISBN) ON UPDATE CASCADE   
);

CREATE TABLE ROLE (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE ACL (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE ROLE_ACL (
	ROLE_ID INT NOT NULL,
    ACL_ID INT NOT NULL,
	CONSTRAINT ROLE_ACL PRIMARY KEY (ROLE_ID, ACL_ID),
    CONSTRAINT ROLE_ACL_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID),
	CONSTRAINT ROLE_ACL_ACL FOREIGN KEY (ACL_ID) REFERENCES ACL(ID)
);

CREATE TABLE USER (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	USERNAME VARCHAR(50) UNIQUE NOT NULL,
	PASSWORD VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(50) UNIQUE NOT NULL,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    PHONE VARCHAR(11),
    SHIPPING_ADDRESS VARCHAR(100) NOT NULL,
    ROLE_ID INT NOT NULL DEFAULT 1,
	CONSTRAINT USER_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID)
);

CREATE TABLE PAYMENT (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	USER_ID INT NOT NULL,
    TYPE ENUM('VISA', 'MASTER CARD') NOT NULL,
    CARD_NUMBER VARCHAR(12) NOT NULL,
    CVV VARCHAR(3) NOT NULL,
    EXPIRE_DATE DATE NOT NULL,
	CONSTRAINT PAYMENT_UNIQUE UNIQUE (USER_ID, CARD_NUMBER),
	CONSTRAINT PAYMENT_USER FOREIGN KEY (USER_ID) REFERENCES USER(ID)
);

CREATE TABLE USER_ORDER (
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	USER_ID INT NOT NULL,
	PAYMENT_ID INT NOT NULL,
    ISSUE_DATE TIMESTAMP NOT NULL,
	CONSTRAINT USER_ORDER_USER FOREIGN KEY (USER_ID) REFERENCES USER(ID),
	CONSTRAINT USER_ORDER_PAYMENT FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT(ID)
);

CREATE TABLE USER_ORDER_DETAILS (
	USER_ORDER_ID INT,
    BOOK_ISBN VARCHAR(10) NOT NULL,
    BOOK_QUANTITY INT NOT NULL,
    CONSTRAINT USER_ORDER_DETAILS PRIMARY KEY (USER_ORDER_ID, BOOK_ISBN),
	CONSTRAINT USER_ORDER_DETAILS_USER_ORDER FOREIGN KEY (USER_ORDER_ID) REFERENCES USER_ORDER(ID),
	CONSTRAINT USER_ORDER_DETAILS_BOOK FOREIGN KEY (BOOK_ISBN) REFERENCES BOOK(ISBN) ON UPDATE CASCADE
);

DELIMITER //
CREATE TRIGGER ENSURE_NON_NEGATIVE_QUANTITY BEFORE UPDATE ON `BOOK`
FOR EACH ROW
	BEGIN
		IF NEW.AVAILABLE_QUANTITY < 0 THEN
			set @message_text = concat('Cannot order more than available quantity on ', old.TITLE);
			SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = @message_text;
		END IF;
	END //
DELIMITER ;

-- INSERT INTO `BOOK_STORE`.`PUBLISHER`(`NAME`,`ADDRESS`,`PHONE`)
-- VALUES ('Bishoy','Alexandria', '01284327447');
-- 
-- INSERT INTO `BOOK_STORE`.`BOOK`(`ISBN`,`TITLE`,`PUBLISHER_ID`,`PUBLICATION_YEAR`,`PRICE`,
-- 			`THRESHOLD`,`AVAILABLE_QUANTITY`,`CATEGORY`,`STOCK_ORDER_QUANTITY`)
-- VALUES('1', 'Database Systems', 1, 1990, 50.0, 100, 2, 'Science', 10);
-- 
-- UPDATE BOOK SET AVAILABLE_QUANTITY = AVAILABLE_QUANTITY - 1 WHERE ISBN = '1';

DELIMITER //
CREATE TRIGGER ORDER_WHEN_LESS_THAN_THRESHOLD_AFTER_UPDATE AFTER UPDATE ON BOOK
FOR EACH ROW
	BEGIN
		DECLARE oldOrdersSum INTEGER default 0;
		DECLARE QTY INTEGER;
		select sum(QUANTITY) from STOCK_ORDER where BOOK_ISBN = NEW.ISBN and IS_RECEIVED = FALSE
		group by BOOK_ISBN into oldOrdersSum;
		IF (OLD.AVAILABLE_QUANTITY != NEW.AVAILABLE_QUANTITY or OLD.THRESHOLD != NEW.THRESHOLD) and NEW.AVAILABLE_QUANTITY + oldOrdersSum < NEW.THRESHOLD
		THEN
			set QTY = CEIL((NEW.THRESHOLD - (NEW.AVAILABLE_QUANTITY + oldOrdersSum)) / NEW.STOCK_ORDER_QUANTITY) * NEW.STOCK_ORDER_QUANTITY;
			INSERT INTO BOOK_STORE.`STOCK_ORDER`(BOOK_ISBN, QUANTITY)
			VALUES(NEW.ISBN, QTY);
		END IF;
	END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER ORDER_WHEN_LESS_THAN_THRESHOLD_AFTER_INSERT AFTER INSERT ON `BOOK`
	FOR EACH ROW
	BEGIN
		DECLARE afterOrderQuantity INTEGER;
		DECLARE differenceFromThreshold INTEGER;
        IF NEW.AVAILABLE_QUANTITY < NEW.THRESHOLD
        THEN SET afterOrderQuantity = NEW.AVAILABLE_QUANTITY + NEW.STOCK_ORDER_QUANTITY;
			IF afterOrderQuantity < NEW.THRESHOLD
            THEN 
				SET differenceFromThreshold = NEW.THRESHOLD - NEW.AVAILABLE_QUANTITY;
                INSERT INTO `BOOK_STORE`.`STOCK_ORDER`(`BOOK_ISBN`, `QUANTITY`)
				VALUES(NEW.ISBN, differenceFromThreshold);
            ELSE 
				INSERT INTO `BOOK_STORE`.`STOCK_ORDER`(`BOOK_ISBN`, `QUANTITY`)
				VALUES(NEW.ISBN, NEW.STOCK_ORDER_QUANTITY);
            END IF;
        END IF;
	END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER UPDATE_QUANTITY_ON_ORDER_RECEIVE AFTER UPDATE ON `STOCK_ORDER`
	FOR EACH ROW
	BEGIN
		IF OLD.IS_RECEIVED = FALSE AND NEW.IS_RECEIVED = TRUE
		THEN
			UPDATE BOOK SET AVAILABLE_QUANTITY = AVAILABLE_QUANTITY + OLD.QUANTITY 
            WHERE ISBN = OLD.BOOK_ISBN;
        END IF;
	END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER UPDATE_QUANTITY_ON_ORDER_DELETE BEFORE DELETE ON `STOCK_ORDER`
	FOR EACH ROW
	BEGIN
		IF OLD.IS_RECEIVED = FALSE
		THEN
			UPDATE BOOK SET AVAILABLE_QUANTITY = AVAILABLE_QUANTITY + OLD.QUANTITY 
            WHERE ISBN = OLD.BOOK_ISBN;
        END IF;
	END //
DELIMITER ;							  

DELIMITER //
CREATE TRIGGER UPDATE_QUANTITY_ON_ITEM_SOLD BEFORE INSERT ON `USER_ORDER_DETAILS`
	FOR EACH ROW
	BEGIN
		UPDATE BOOK SET AVAILABLE_QUANTITY = AVAILABLE_QUANTITY - NEW.BOOK_QUANTITY
        WHERE BOOK.ISBN = NEW.BOOK_ISBN;
	END //
DELIMITER ;	

INSERT INTO ROLE(NAME) VALUES('User');
INSERT INTO ROLE(NAME) VALUES('Manager');
INSERT INTO ACL(NAME) VALUES('OpenAdmin');
INSERT INTO ROLE_ACL VALUES(2, 1);

SELECT * FROM USER;
SELECT * FROM ROLE;
SELECT * FROM ACL;
SELECT * FROM ROLE_ACL;
select MD5('111111');

UPDATE USER SET PASSWORD = '96e79218965eb72c92a549dd5a330112';
UPDATE USER SET ROLE_ID = 2;

